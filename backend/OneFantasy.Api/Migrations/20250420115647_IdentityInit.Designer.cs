// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OneFantasy.Api.Data;

#nullable disable

namespace OneFantasy.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250420115647_IdentityInit")]
    partial class IdentityInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("ParticipationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParticipationId");

                    b.ToTable("MinigameGroups");

                    b.HasDiscriminator<string>("GroupType").HasValue("MinigameGroup");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MinigameId");

                    b.ToTable("Options");

                    b.HasDiscriminator<string>("OptionType").HasValue("Option");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.Minigame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MinigameType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Minigames");

                    b.HasDiscriminator<string>("MinigameType").HasValue("Minigame");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Participation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParticipationType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionSeasonId");

                    b.ToTable("Participations");

                    b.HasDiscriminator<string>("ParticipationType").HasValue("Participation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Seasons.CompetitionSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionSeasons");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Seasons.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Seasons.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompetitionSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionSeasonId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2A", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.MinigameGroups.MinigameGroup");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigamePlayersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigameScoresId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitingTeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("MinigamePlayersId")
                        .IsUnique();

                    b.HasIndex("MinigameScoresId")
                        .IsUnique();

                    b.HasIndex("VisitingTeamId");

                    b.HasDiscriminator().HasValue("Match2A");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2B", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.MinigameGroups.MinigameGroup");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigameMatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigamePlayersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitingTeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("MinigameMatchId")
                        .IsUnique();

                    b.HasIndex("MinigamePlayersId")
                        .IsUnique();

                    b.HasIndex("VisitingTeamId");

                    b.ToTable("MinigameGroups", t =>
                        {
                            t.Property("HomeTeamId")
                                .HasColumnName("MinigameGroupMatch2B_HomeTeamId");

                            t.Property("MinigamePlayersId")
                                .HasColumnName("MinigameGroupMatch2B_MinigamePlayersId");

                            t.Property("VisitingTeamId")
                                .HasColumnName("MinigameGroupMatch2B_VisitingTeamId");
                        });

                    b.HasDiscriminator().HasValue("Match2B");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch3", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.MinigameGroups.MinigameGroup");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigamePlayers1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigamePlayers2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigameScoresId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitingTeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("MinigamePlayers1Id")
                        .IsUnique();

                    b.HasIndex("MinigamePlayers2Id")
                        .IsUnique();

                    b.HasIndex("MinigameScoresId")
                        .IsUnique();

                    b.HasIndex("VisitingTeamId");

                    b.ToTable("MinigameGroups", t =>
                        {
                            t.Property("HomeTeamId")
                                .HasColumnName("MinigameGroupMatch3_HomeTeamId");

                            t.Property("MinigameScoresId")
                                .HasColumnName("MinigameGroupMatch3_MinigameScoresId");

                            t.Property("VisitingTeamId")
                                .HasColumnName("MinigameGroupMatch3_VisitingTeamId");
                        });

                    b.HasDiscriminator().HasValue("Match3");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMulti", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.MinigameGroups.MinigameGroup");

                    b.Property<int>("Match1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Match2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Match3Id")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Match1Id")
                        .IsUnique();

                    b.HasIndex("Match2Id")
                        .IsUnique();

                    b.HasIndex("Match3Id")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Multi");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.OptionInterval", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.MinigameOptions.Option");

                    b.Property<int?>("Max")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Min")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinigameMatchId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MinigameMatchId");

                    b.HasDiscriminator().HasValue("Interval");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.OptionPlayer", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.MinigameOptions.Option");

                    b.Property<int?>("MinigamePlayersId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MinigamePlayersId");

                    b.HasIndex("PlayerId");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.OptionScore", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.MinigameOptions.Option");

                    b.Property<int>("AwayGoals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinigameScoresId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MinigameScoresId");

                    b.HasDiscriminator().HasValue("Score");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.OptionTeam", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.MinigameOptions.Option");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Team");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.MinigameMatch", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Minigames.Minigame");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Match");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.MinigamePlayers", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Minigames.Minigame");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.ToTable("Minigames", t =>
                        {
                            t.Property("Type")
                                .HasColumnName("MinigamePlayers_Type");
                        });

                    b.HasDiscriminator().HasValue("Players");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.MinigameResult", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Minigames.Minigame");

                    b.Property<int>("DrawId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeVictoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitingVictoryId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DrawId");

                    b.HasIndex("HomeVictoryId");

                    b.HasIndex("VisitingVictoryId");

                    b.HasDiscriminator().HasValue("Result");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.MinigameScores", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Minigames.Minigame");

                    b.HasDiscriminator().HasValue("Scores");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.ParticipationExtraOrSpecial", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Participation");

                    b.Property<int?>("MinigameGroupMatch2AId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinigameGroupMatch2BId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MinigameGroupMatch2AId");

                    b.HasIndex("MinigameGroupMatch2BId");

                    b.HasDiscriminator().HasValue("ExtraOrSpecial");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.ParticipationStandard", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Participation");

                    b.Property<int?>("MinigameGroupMatch3Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinigameGroupMultiId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MinigameGroupMatch3Id");

                    b.HasIndex("MinigameGroupMultiId");

                    b.HasDiscriminator().HasValue("Standard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroup", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Participations.Participation", "Participation")
                        .WithMany()
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.Option", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Minigames.Minigame", "Minigame")
                        .WithMany()
                        .HasForeignKey("MinigameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Minigame");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.Minigame", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.MinigameGroups.MinigameGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Participation", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Seasons.CompetitionSeason", "CompetitionSeason")
                        .WithMany("Participations")
                        .HasForeignKey("CompetitionSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionSeason");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Seasons.CompetitionSeason", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Competition", "Competition")
                        .WithMany("Seasons")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Seasons.Player", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Seasons.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Seasons.Team", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Seasons.CompetitionSeason", null)
                        .WithMany("Teams")
                        .HasForeignKey("CompetitionSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2A", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Seasons.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigamePlayers", "MinigamePlayers")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2A", "MinigamePlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigameScores", "MinigameScores")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2A", "MinigameScoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Seasons.Team", "VisitingTeam")
                        .WithMany()
                        .HasForeignKey("VisitingTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeTeam");

                    b.Navigation("MinigamePlayers");

                    b.Navigation("MinigameScores");

                    b.Navigation("VisitingTeam");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2B", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Seasons.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigameMatch", "MinigameMatch")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2B", "MinigameMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigamePlayers", "MinigamePlayers")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2B", "MinigamePlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Seasons.Team", "VisitingTeam")
                        .WithMany()
                        .HasForeignKey("VisitingTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeTeam");

                    b.Navigation("MinigameMatch");

                    b.Navigation("MinigamePlayers");

                    b.Navigation("VisitingTeam");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch3", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Seasons.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigamePlayers", "MinigamePlayers1")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch3", "MinigamePlayers1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigamePlayers", "MinigamePlayers2")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch3", "MinigamePlayers2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigameScores", "MinigameScores")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch3", "MinigameScoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Seasons.Team", "VisitingTeam")
                        .WithMany()
                        .HasForeignKey("VisitingTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeTeam");

                    b.Navigation("MinigamePlayers1");

                    b.Navigation("MinigamePlayers2");

                    b.Navigation("MinigameScores");

                    b.Navigation("VisitingTeam");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMulti", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigameResult", "Match1")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMulti", "Match1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigameResult", "Match2")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMulti", "Match2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigameResult", "Match3")
                        .WithOne()
                        .HasForeignKey("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMulti", "Match3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match1");

                    b.Navigation("Match2");

                    b.Navigation("Match3");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.OptionInterval", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigameMatch", null)
                        .WithMany("Options")
                        .HasForeignKey("MinigameMatchId");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.OptionPlayer", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigamePlayers", null)
                        .WithMany("Options")
                        .HasForeignKey("MinigamePlayersId");

                    b.HasOne("OneFantasy.Api.Models.Seasons.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.OptionScore", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Minigames.MinigameScores", null)
                        .WithMany("Options")
                        .HasForeignKey("MinigameScoresId");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.MinigameOptions.OptionTeam", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Seasons.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.MinigameResult", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.MinigameOptions.Option", "Draw")
                        .WithMany()
                        .HasForeignKey("DrawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.MinigameOptions.OptionTeam", "HomeVictory")
                        .WithMany()
                        .HasForeignKey("HomeVictoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.MinigameOptions.OptionTeam", "VisitingVictory")
                        .WithMany()
                        .HasForeignKey("VisitingVictoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Draw");

                    b.Navigation("HomeVictory");

                    b.Navigation("VisitingVictory");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.ParticipationExtraOrSpecial", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2A", "MinigameGroupMatch2A")
                        .WithMany()
                        .HasForeignKey("MinigameGroupMatch2AId");

                    b.HasOne("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch2B", "MinigameGroupMatch2B")
                        .WithMany()
                        .HasForeignKey("MinigameGroupMatch2BId");

                    b.Navigation("MinigameGroupMatch2A");

                    b.Navigation("MinigameGroupMatch2B");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.ParticipationStandard", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMatch3", "MinigameGroupMatch3")
                        .WithMany()
                        .HasForeignKey("MinigameGroupMatch3Id");

                    b.HasOne("OneFantasy.Api.Models.MinigameGroups.MinigameGroupMulti", "MinigameGroupMulti")
                        .WithMany()
                        .HasForeignKey("MinigameGroupMultiId");

                    b.Navigation("MinigameGroupMatch3");

                    b.Navigation("MinigameGroupMulti");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Competition", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Seasons.CompetitionSeason", b =>
                {
                    b.Navigation("Participations");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Seasons.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.MinigameMatch", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.MinigamePlayers", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Minigames.MinigameScores", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
