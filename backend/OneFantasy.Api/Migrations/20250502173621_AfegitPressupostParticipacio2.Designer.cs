// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OneFantasy.Api.Data;

#nullable disable

namespace OneFantasy.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250502173621_AfegitPressupostParticipacio2")]
    partial class AfegitPressupostParticipacio2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("ParticipationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParticipationId");

                    b.ToTable("MinigameGroup");

                    b.HasDiscriminator<string>("GroupType").HasValue("MinigameGroup");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameOptions.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasOccurred")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("MinigameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MinigameId");

                    b.ToTable("MinigameOptions", (string)null);

                    b.HasDiscriminator<string>("OptionType").HasValue("Base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Minigames.Minigame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsResolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("MinigameType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Minigame");

                    b.HasDiscriminator<string>("MinigameType").HasValue("Minigame");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Participation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Budget")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParticipationType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Participations");

                    b.HasDiscriminator<string>("ParticipationType").HasValue("Participation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserMinigame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserMinigameGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MinigameId");

                    b.HasIndex("UserMinigameGroupId");

                    b.ToTable("UserMinigame");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserMinigameGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinigameGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserParticipationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MinigameGroupId");

                    b.HasIndex("UserParticipationId");

                    b.ToTable("UserMinigameGroup");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserOption", b =>
                {
                    b.Property<int>("UserMinigameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserMinigameId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("UserOptions", (string)null);
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParticipationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParticipationId");

                    b.HasIndex("UserId", "ParticipationId")
                        .IsUnique();

                    b.ToTable("UserParticipations");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroupMatch2A", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitingTeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("VisitingTeamId");

                    b.HasDiscriminator().HasValue("Match2A");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroupMatch2B", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitingTeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("VisitingTeamId");

                    b.ToTable("MinigameGroup", t =>
                        {
                            t.Property("HomeTeamId")
                                .HasColumnName("MinigameGroupMatch2B_HomeTeamId");

                            t.Property("VisitingTeamId")
                                .HasColumnName("MinigameGroupMatch2B_VisitingTeamId");
                        });

                    b.HasDiscriminator().HasValue("Match2B");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroupMatch3", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitingTeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("VisitingTeamId");

                    b.ToTable("MinigameGroup", t =>
                        {
                            t.Property("HomeTeamId")
                                .HasColumnName("MinigameGroupMatch3_HomeTeamId");

                            t.Property("VisitingTeamId")
                                .HasColumnName("MinigameGroupMatch3_VisitingTeamId");
                        });

                    b.HasDiscriminator().HasValue("Match3");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroupMulti", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup");

                    b.HasDiscriminator().HasValue("Multi");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameOptions.OptionInterval", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.MinigameOptions.Option");

                    b.Property<int?>("Max")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Min")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Interval");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameOptions.OptionPlayer", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.MinigameOptions.Option");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PlayerId");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameOptions.OptionScore", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.MinigameOptions.Option");

                    b.Property<int>("AwayGoals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Score");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameOptions.OptionTeam", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.MinigameOptions.Option");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Team");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Minigames.MinigameMatch", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Minigames.Minigame");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Match");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Minigames.MinigamePlayers", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Minigames.Minigame");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.ToTable("Minigame", t =>
                        {
                            t.Property("Type")
                                .HasColumnName("MinigamePlayers_Type");
                        });

                    b.HasDiscriminator().HasValue("Players");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Minigames.MinigameResult", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Minigames.Minigame");

                    b.HasDiscriminator().HasValue("Result");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Minigames.MinigameScores", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Minigames.Minigame");

                    b.HasDiscriminator().HasValue("Scores");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.ParticipationExtra", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Participation");

                    b.HasDiscriminator().HasValue("Extra");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.ParticipationSpecial", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Participation");

                    b.HasDiscriminator().HasValue("Special");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.ParticipationStandard", b =>
                {
                    b.HasBaseType("OneFantasy.Api.Models.Participations.Participation");

                    b.HasDiscriminator().HasValue("Standard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Player", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Season", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Competition", "Competition")
                        .WithMany("Seasons")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Team", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Season", "Season")
                        .WithMany("Teams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Participations.Participation", "Participation")
                        .WithMany("Groups")
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameOptions.Option", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Participations.Minigames.Minigame", "Minigame")
                        .WithMany("Options")
                        .HasForeignKey("MinigameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Minigame");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Minigames.Minigame", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup", "Group")
                        .WithMany("Minigames")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Participation", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Season", "Season")
                        .WithMany("Participations")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserMinigame", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Participations.Minigames.Minigame", "Minigame")
                        .WithMany()
                        .HasForeignKey("MinigameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Participations.Users.UserMinigameGroup", "UserMinigameGroup")
                        .WithMany("UserMinigames")
                        .HasForeignKey("UserMinigameGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Minigame");

                    b.Navigation("UserMinigameGroup");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserMinigameGroup", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup", "MinigameGroup")
                        .WithMany()
                        .HasForeignKey("MinigameGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Participations.Users.UserParticipation", "UserParticipation")
                        .WithMany("Groups")
                        .HasForeignKey("UserParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MinigameGroup");

                    b.Navigation("UserParticipation");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserOption", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Participations.MinigameOptions.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Participations.Users.UserMinigame", "UserMinigame")
                        .WithMany("UserOptions")
                        .HasForeignKey("UserMinigameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("UserMinigame");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserParticipation", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Participations.Participation", "Participation")
                        .WithMany("UserParticipations")
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Authentication.ApplicationUser", "User")
                        .WithMany("UserParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroupMatch2A", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Competitions.Team", "VisitingTeam")
                        .WithMany()
                        .HasForeignKey("VisitingTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeTeam");

                    b.Navigation("VisitingTeam");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroupMatch2B", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Competitions.Team", "VisitingTeam")
                        .WithMany()
                        .HasForeignKey("VisitingTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeTeam");

                    b.Navigation("VisitingTeam");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroupMatch3", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OneFantasy.Api.Models.Competitions.Team", "VisitingTeam")
                        .WithMany()
                        .HasForeignKey("VisitingTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeTeam");

                    b.Navigation("VisitingTeam");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameOptions.OptionPlayer", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameOptions.OptionTeam", b =>
                {
                    b.HasOne("OneFantasy.Api.Models.Competitions.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Authentication.ApplicationUser", b =>
                {
                    b.Navigation("UserParticipations");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Competition", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Season", b =>
                {
                    b.Navigation("Participations");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Competitions.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.MinigameGroups.MinigameGroup", b =>
                {
                    b.Navigation("Minigames");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Minigames.Minigame", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Participation", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("UserParticipations");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserMinigame", b =>
                {
                    b.Navigation("UserOptions");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserMinigameGroup", b =>
                {
                    b.Navigation("UserMinigames");
                });

            modelBuilder.Entity("OneFantasy.Api.Models.Participations.Users.UserParticipation", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
